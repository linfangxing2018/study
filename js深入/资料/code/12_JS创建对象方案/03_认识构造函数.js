function foo() {
  console.log("foo~, 函数体代码")
}

// foo就是一个普通的函数
// foo()

// 换一种方式来调用foo函数: 通过new关键字去调用一个函数, 那么这个函数就是一个构造函数了
var f1 = new foo
console.log(f1)


// 面试题1
// 当我们通过new去调用一个函数时, 和通过的调用到底有什么区别?

// 当使用new去构造调用一个函数会发生一下几步
// 构造调用：
// 创造一个全新的对象
// 这个对象会被执行 [[Prototype]] 连接，将这个新对象的 [[Prototype]] 链接到这个构造函
// 数.prototype 所指向的对象
// 这个新对象会绑定到函数调用的 this
// 如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象

// 面试题2
// new 一个构造函数，如果函数返回 return {} 、 return null 、 
// return 1 、  return true 会发生什么情况？
// 如果函数返回一个对象，那么new 这个函数调用返回这个函数的返回对象，否则返回 new 创建的新对
// 象



